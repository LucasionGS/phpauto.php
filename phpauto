#!/usr/bin/env php
<?php

if (!defined('PHPAUTO_WORKING_DIR')) {
  define('PHPAUTO_WORKING_DIR', getcwd());
}

if (!defined('PHPAUTO_USE_INCLUDE')) {
  define('PHPAUTO_USE_INCLUDE', false);
}

if (!PHPAUTO_USE_INCLUDE) {
  $executable = array_shift($argv);
  $executable = realpath($executable);
  echo "Executable: " . $executable . "\n";
  $args = $argv;
  
  // Display help message
  $OPTION_HELP = in_array('--help', $args) || in_array('-h', $args);
  // Output JSON instead of text
  $OPTION_JSON = in_array('--json', $args) || in_array('-j', $args);
  // Dump the autoload file
  $OPTION_DUMP = in_array('--dump', $args) || in_array('-d', $args);
  // Do not output any information (Except json if --json is set)
  $OPTION_QUIET = in_array('--quiet', $args) || in_array('-q', $args);
  // Together with --dump, dump a development version of the autoload file
  // that dynamically autoloads the classes instead of using a class map
  $OPTION_DEV = in_array('--dev', $args) || in_array('-D', $args);
  // This is used in development mode to include the file directly
  // from the path instead of dumping the class map
  
  if ($OPTION_HELP) {
    echo "PHPAuto by Lucasion\n";
    echo "Usage: phpauto [options]\n";
    echo "Options:\n";
    echo "  --help, -h    Show this help message\n";
    echo "  --json, -j    Output the result as JSON instead of text\n";
    echo "  --dump, -d    Dump the autoload file to the current directory\n";
    echo "  --quiet, -q   Do not output any information\n";
    echo "  --dev, -D     Together with --dump, dump a development version of the autoload file\n";
    exit(0);
  }
}

if (!function_exists("PHPAUTO_logMessage")) {
  function PHPAUTO_logMessage(...$data)
  {
    global $OPTION_QUIET;
    if (!$OPTION_QUIET && !PHPAUTO_USE_INCLUDE) {
      foreach ($data as $message) {
        echo $message . "\n";
      }
    }
  }
}

if (!function_exists("PHPAUTO_readDirRecursive")) {
  function PHPAUTO_readDirRecursive(string $dir)
  {
    $phpFiles = [];
    $files = scandir($dir);

    foreach ($files as $file) {
      if ($file === '.' || $file === '..')
        continue;
      $filePath = "$dir/$file";
      if (is_dir($filePath)) {
        $phpFiles = array_merge($phpFiles, PHPAUTO_readDirRecursive($filePath));
      } else {
        if (substr($filePath, -4) === '.php') {
          $phpFiles[] = $filePath;
        }
      }
    }

    return $phpFiles;
  }
}


// Cache the namespace and class names
PHPAUTO_logMessage("Caching namespace and class names...");
// if (!isset($namespaceClasses)) $namespaceClasses = []; // { namespace: filepath }
// $namespaceClasses = $GLOBALS['__namespaceClasses'] ?? [];


$namespaceClasses = [];
PHPAUTO_logMessage("Reading all PHP files in the current directory...");
$allPhpFiles = (array) PHPAUTO_readDirRecursive(PHPAUTO_WORKING_DIR);
// PHPAUTO_logMessage("Found the following PHP files:");
// PHPAUTO_logMessage(...$allPhpFiles);

foreach ($allPhpFiles as $file) {
  $fileContent = file_get_contents($file);
  $lines = explode("\n", $fileContent);
  $namespace = "";
  foreach ($lines as $line) {
    if (preg_match('/^\s*namespace\s*(.*);/', $line, $nsMatch)) {
      $namespace = trim($nsMatch[1]);
    }
    if (preg_match('/^\s*(?:abstract\s+)?class\s+(\w+)/', $line, $classMatch)) {
      $className = $classMatch[1];
      $fullClassName = $namespace . "\\" . $className;
      $namespaceClasses[$fullClassName] = $file;
    }
  }
}

PHPAUTO_logMessage("Found the following namespaces:");
PHPAUTO_logMessage(print_r($namespaceClasses, true));

if (isset($OPTION_JSON) && $OPTION_JSON) {
  echo json_encode($namespaceClasses, JSON_PRETTY_PRINT);
}

if (isset($OPTION_DUMP) && $OPTION_DUMP) {
  $phpautogen = PHPAUTO_WORKING_DIR . '/__PHPAUTOGENDEV__.php';
  $autoloadFile = PHPAUTO_WORKING_DIR . '/autoload.php';
  if (isset($OPTION_DEV) && $OPTION_DEV) { // Development version
    $phpautogenContent = file_get_contents(__FILE__);

    // Remove first line
    $phpautogenContent = substr($phpautogenContent, strpos($phpautogenContent, "\n") + 1);
    
    file_put_contents($phpautogen, $phpautogenContent);
    $autoloadContent = "<?php\n";
    $autoloadContent .= "// Autogenerated by PHPAuto by Lucasion\n";
    $autoloadContent .= "// DO NOT MODIFY THIS FILE\n";
    $autoloadContent .= "// To regenerate this file, run `phpauto -d` in the folder where this file is.\n";
    $autoloadContent .= "// DEVELOPMENT MODE -- DO NOT USE IN PRODUCTION.\n";
    $autoloadContent .= "\n";
    $autoloadContent .= "\$__classMap__ = null;\n";
    $autoloadContent .= "spl_autoload_register(function(\$class) use (&\$__classMap__) {\n";
    $autoloadContent .= "  // Dynamically load the class\n";
    $autoloadContent .= "  if (!defined('PHPAUTO_USE_INCLUDE')) define('PHPAUTO_USE_INCLUDE', true);\n";
    $autoloadContent .= "  if (\$__classMap__ == null) \$__classMap__ = require __DIR__ . '/__PHPAUTOGENDEV__.php';\n";
    $autoloadContent .= "  // Now __classMap__ is defined from the included file\n";
    $autoloadContent .= "  if (isset(\$__classMap__[\$class])) {\n";
    $autoloadContent .= "    require_once __DIR__ . '/' . \$__classMap__[\$class];\n";
    $autoloadContent .= "  }\n";
    $autoloadContent .= "});\n";
    file_put_contents($autoloadFile, $autoloadContent);
    PHPAUTO_logMessage("Autoload file written to $autoloadFile");
  } else { // Production version
    if (file_exists($phpautogen)) {
      unlink($phpautogen);
    }
    $autoloadContent = "<?php\n";
    $autoloadContent .= "// Autogenerated by PHPAuto by Lucasion\n";
    $autoloadContent .= "// DO NOT MODIFY THIS FILE\n";
    $autoloadContent .= "// To regenerate this file, run `phpauto -d` in the folder where this file is.\n";
    $autoloadContent .= "\n";
    $autoloadContent .= "\$__classMap__ = [\n";
    foreach ($namespaceClasses as $className => $filePath) {
      $autoloadContent .= '  "' . str_replace('\\', '\\\\', $className) . '" => __DIR__ . "/' . str_replace('\\', '/', substr($filePath, strlen(PHPAUTO_WORKING_DIR) + 1)) . "\",\n";
    }
    $autoloadContent .= "];\n";
    $autoloadContent .= "spl_autoload_register(function(\$class) use (\$__classMap__) {\n";
    $autoloadContent .= "  if (isset(\$__classMap__[\$class])) {\n";
    $autoloadContent .= "    require_once \$__classMap__[\$class];\n";
    $autoloadContent .= "  }\n";
    $autoloadContent .= "});\n";
    file_put_contents($autoloadFile, $autoloadContent);
    PHPAUTO_logMessage("Autoload file written to $autoloadFile");
  }
}

$forIncludeClasses = [];
foreach ($namespaceClasses as $className => $filePath) {
  $forIncludeClasses[$className] = str_replace('\\', '/', substr($filePath, strlen(PHPAUTO_WORKING_DIR) + 1));
}

return $forIncludeClasses;
// if (PHPAUTO_USE_INCLUDE) {
//   // Code is reachable, editor might not recognize it
// }